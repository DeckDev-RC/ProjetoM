#!/usr/bin/env python3
"""
üöÄ Instalador Autom√°tico - Su√≠te de Performance Testing
Instala e configura automaticamente todas as depend√™ncias necess√°rias

Funcionalidades:
- Verifica√ß√£o de pr√©-requisitos
- Instala√ß√£o de depend√™ncias Python
- Configura√ß√£o do ambiente
- Verifica√ß√£o da instala√ß√£o
- Testes b√°sicos
"""

import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path
import json
import urllib.request

class PerformanceSuiteInstaller:
    """Instalador autom√°tico da su√≠te de performance"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.python_version = sys.version_info
        self.requirements_installed = False
        self.chrome_available = False
        self.node_available = False
        
    def print_header(self):
        """Imprime cabe√ßalho do instalador"""
        print("üöÄ INSTALADOR AUTOM√ÅTICO - SU√çTE DE PERFORMANCE TESTING")
        print("=" * 60)
        print("Este script ir√° instalar e configurar todas as depend√™ncias")
        print("necess√°rias para executar os testes de performance.")
        print()
    
    def check_prerequisites(self):
        """Verifica pr√©-requisitos do sistema"""
        print("üîç Verificando pr√©-requisitos...")
        
        # Verificar Python
        if self.python_version < (3, 8):
            print(f"‚ùå Python {self.python_version.major}.{self.python_version.minor} detectado")
            print("‚ö†Ô∏è Python 3.8+ √© necess√°rio")
            return False
        else:
            print(f"‚úÖ Python {self.python_version.major}.{self.python_version.minor} OK")
        
        # Verificar pip
        try:
            import pip
            print("‚úÖ pip dispon√≠vel")
        except ImportError:
            print("‚ùå pip n√£o encontrado")
            return False
        
        # Verificar Node.js
        try:
            result = subprocess.run(['node', '--version'], capture_output=True, text=True, shell=True)
            if result.returncode == 0:
                node_version = result.stdout.strip()
                print(f"‚úÖ Node.js {node_version} dispon√≠vel")
                self.node_available = True
            else:
                print("‚ö†Ô∏è Node.js n√£o encontrado (necess√°rio para o projeto)")
        except FileNotFoundError:
            print("‚ö†Ô∏è Node.js n√£o encontrado (necess√°rio para o projeto)")
        
        # Verificar npm
        try:
            result = subprocess.run(['npm', '--version'], capture_output=True, text=True, shell=True)
            if result.returncode == 0:
                npm_version = result.stdout.strip()
                print(f"‚úÖ npm {npm_version} dispon√≠vel")
            else:
                print("‚ö†Ô∏è npm n√£o encontrado")
        except FileNotFoundError:
            print("‚ö†Ô∏è npm n√£o encontrado")
        
        # Verificar Chrome/Chromium
        chrome_paths = {
            'linux': [
                '/usr/bin/google-chrome',
                '/usr/bin/chromium-browser',
                '/usr/bin/chromium'
            ],
            'darwin': [
                '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',
                '/Applications/Chromium.app/Contents/MacOS/Chromium'
            ],
            'windows': [
                'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
                'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'
            ]
        }
        
        chrome_found = False
        for path in chrome_paths.get(self.system, []):
            if os.path.exists(path):
                print(f"‚úÖ Chrome/Chromium encontrado: {path}")
                chrome_found = True
                self.chrome_available = True
                break
        
        if not chrome_found:
            print("‚ö†Ô∏è Chrome/Chromium n√£o encontrado")
            print("   Selenium precisa de um browser para funcionar")
        
        return True
    
    def install_python_dependencies(self):
        """Instala depend√™ncias Python"""
        print("\nüì¶ Instalando depend√™ncias Python...")
        
        requirements_file = Path("requirements-performance.txt")
        
        if not requirements_file.exists():
            print("‚ö†Ô∏è Arquivo requirements-performance.txt n√£o encontrado")
            print("Criando arquivo com depend√™ncias essenciais...")
            self.create_requirements_file()
        
        try:
            # Atualizar pip primeiro
            print("üîÑ Atualizando pip...")
            subprocess.run([
                sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'
            ], check=True)
            
            # Instalar depend√™ncias
            print("üì• Instalando depend√™ncias...")
            subprocess.run([
                sys.executable, '-m', 'pip', 'install', '-r', str(requirements_file)
            ], check=True)
            
            print("‚úÖ Depend√™ncias Python instaladas com sucesso!")
            self.requirements_installed = True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
            print("Tentando instala√ß√£o individual...")
            return self.install_essential_packages()
        
        return True
    
    def create_requirements_file(self):
        """Cria arquivo de requirements b√°sico"""
        essential_packages = [
            "selenium>=4.15.0",
            "webdriver-manager>=4.0.1",
            "aiohttp>=3.9.0",
            "psutil>=5.9.0",
            "requests>=2.31.0"
        ]
        
        with open("requirements-performance.txt", "w") as f:
            f.write("# Essential packages for performance testing\n")
            for package in essential_packages:
                f.write(f"{package}\n")
    
    def install_essential_packages(self):
        """Instala pacotes essenciais individualmente"""
        essential_packages = [
            "selenium",
            "webdriver-manager", 
            "aiohttp",
            "psutil",
            "requests"
        ]
        
        for package in essential_packages:
            try:
                print(f"üì¶ Instalando {package}...")
                subprocess.run([
                    sys.executable, '-m', 'pip', 'install', package
                ], check=True)
                print(f"‚úÖ {package} instalado")
            except subprocess.CalledProcessError:
                print(f"‚ùå Falha ao instalar {package}")
                return False
        
        self.requirements_installed = True
        return True
    
    def install_chrome_driver(self):
        """Instala ChromeDriver automaticamente"""
        print("\nüöó Configurando ChromeDriver...")
        
        try:
            from selenium import webdriver
            from webdriver_manager.chrome import ChromeDriverManager
            
            print("üì• Baixando ChromeDriver...")
            driver_path = ChromeDriverManager().install()
            print(f"‚úÖ ChromeDriver instalado: {driver_path}")
            
            # Testar se funciona
            print("üß™ Testando ChromeDriver...")
            from selenium.webdriver.chrome.options import Options
            from selenium.webdriver.chrome.service import Service
            
            options = Options()
            options.add_argument("--headless")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            
            driver = webdriver.Chrome(
                service=Service(driver_path),
                options=options
            )
            driver.get("https://www.google.com")
            driver.quit()
            
            print("‚úÖ ChromeDriver funcionando corretamente!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar ChromeDriver: {e}")
            return False
    
    def install_lighthouse(self):
        """Instala Lighthouse globalmente"""
        print("\nüí° Instalando Lighthouse (opcional)...")
        
        if not self.node_available:
            print("‚ö†Ô∏è Node.js n√£o dispon√≠vel, pulando Lighthouse")
            return False
        
        try:
            # Verificar se j√° est√° instalado
            result = subprocess.run(['lighthouse', '--version'], capture_output=True, text=True, shell=True)
            if result.returncode == 0:
                print(f"‚úÖ Lighthouse j√° instalado: {result.stdout.strip()}")
                return True
        except FileNotFoundError:
            pass
        
        try:
            print("üì• Instalando Lighthouse...")
            # Usar shell=True no Windows para resolver problemas de PATH
            subprocess.run(['npm', 'install', '-g', 'lighthouse'], 
                         check=True, shell=True, timeout=300)
            print("‚úÖ Lighthouse instalado com sucesso!")
            return True
            
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è Timeout na instala√ß√£o do Lighthouse (pode estar lento)")
            print("Lighthouse √© opcional, continuando sem ele...")
            return False
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è Falha ao instalar Lighthouse: {e}")
            print("Lighthouse √© opcional, continuando sem ele...")
            return False
        except FileNotFoundError:
            print("‚ö†Ô∏è npm n√£o encontrado no PATH do sistema")
            print("Certifique-se de que Node.js est√° instalado corretamente")
            print("Lighthouse √© opcional, continuando sem ele...")
            return False
    
    def create_config_file(self):
        """Cria arquivo de configura√ß√£o padr√£o"""
        print("\n‚öôÔ∏è Criando arquivo de configura√ß√£o...")
        
        config = {
            "base_url": "http://localhost:8080",
            "output_dir": "performance_reports",
            "tests": {
                "bundle_analysis": True,
                "memory_profiling": True,
                "stress_testing": True,
                "performance_suite": True
            },
            "memory": {
                "duration_minutes": 5,
                "snapshot_interval": 2
            },
            "stress": {
                "max_users": 50,
                "ramp_up_minutes": 5,
                "test_duration_minutes": 10
            },
            "alerts": {
                "enabled": True,
                "thresholds": {
                    "performance_score": 70,
                    "memory_growth_rate": 1048576,
                    "error_rate": 5.0
                }
            }
        }
        
        config_file = Path("performance_config.json")
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Configura√ß√£o criada: {config_file}")
    
    def create_output_directory(self):
        """Cria diret√≥rio de output"""
        output_dir = Path("performance_reports")
        output_dir.mkdir(exist_ok=True)
        print(f"üìÅ Diret√≥rio de reports criado: {output_dir}")
    
    def run_installation_test(self):
        """Executa teste b√°sico da instala√ß√£o"""
        print("\nüß™ Testando instala√ß√£o...")
        
        # Testar imports
        try:
            import selenium
            import aiohttp
            import psutil
            import requests
            print("‚úÖ Imports b√°sicos funcionando")
        except ImportError as e:
            print(f"‚ùå Erro nos imports: {e}")
            return False
        
        # Testar Selenium
        try:
            from selenium import webdriver
            from selenium.webdriver.chrome.options import Options
            from selenium.webdriver.chrome.service import Service
            from webdriver_manager.chrome import ChromeDriverManager
            
            options = Options()
            options.add_argument("--headless")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            
            driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()),
                options=options
            )
            driver.get("data:text/html,<html><body><h1>Test</h1></body></html>")
            title = driver.title
            driver.quit()
            
            print("‚úÖ Selenium funcionando")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Problema com Selenium: {e}")
        
        # Testar aiohttp
        try:
            import asyncio
            import aiohttp
            
            async def test_aiohttp():
                async with aiohttp.ClientSession() as session:
                    async with session.get('https://httpbin.org/get') as response:
                        return response.status == 200
            
            result = asyncio.run(test_aiohttp())
            if result:
                print("‚úÖ aiohttp funcionando")
            else:
                print("‚ö†Ô∏è aiohttp com problemas")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Problema com aiohttp: {e}")
        
        return True
    
    def create_quick_start_script(self):
        """Cria script de in√≠cio r√°pido"""
        script_content = '''#!/usr/bin/env python3
"""
üöÄ Quick Start - Performance Testing Suite
Execute este script para rodar um teste r√°pido
"""

import asyncio
import sys
from pathlib import Path

async def quick_test():
    print("üéØ Executando teste r√°pido da su√≠te de performance...")
    
    try:
        # Testar Bundle Analyzer
        from bundle_analyzer import BundleAnalyzer
        analyzer = BundleAnalyzer()
        print("‚úÖ Bundle Analyzer carregado")
        
        # Testar Memory Profiler
        from memory_profiler import MemoryProfiler
        profiler = MemoryProfiler()
        print("‚úÖ Memory Profiler carregado")
        
        # Testar Stress Tester
        from stress_tester import StressTester
        tester = StressTester()
        print("‚úÖ Stress Tester carregado")
        
        print("\nüéâ Todos os m√≥dulos carregados com sucesso!")
        print("Para executar testes completos:")
        print("  python master_performance_suite.py")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        print("Execute o instalador novamente: python install_performance_suite.py")

if __name__ == "__main__":
    asyncio.run(quick_test())
'''
        
        script_file = Path("quick_start.py")
        with open(script_file, 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        print(f"üöÄ Script de in√≠cio r√°pido criado: {script_file}")
    
    def print_installation_summary(self):
        """Imprime resumo da instala√ß√£o"""
        print("\n" + "=" * 60)
        print("üìã RESUMO DA INSTALA√á√ÉO")
        print("=" * 60)
        
        print(f"‚úÖ Python {self.python_version.major}.{self.python_version.minor}: OK")
        print(f"{'‚úÖ' if self.requirements_installed else '‚ùå'} Depend√™ncias Python: {'Instaladas' if self.requirements_installed else 'Falha'}")
        print(f"{'‚úÖ' if self.chrome_available else '‚ö†Ô∏è'} Chrome/Chromium: {'Dispon√≠vel' if self.chrome_available else 'N√£o encontrado'}")
        print(f"{'‚úÖ' if self.node_available else '‚ö†Ô∏è'} Node.js: {'Dispon√≠vel' if self.node_available else 'N√£o encontrado'}")
        
        print("\nüìÅ ARQUIVOS CRIADOS:")
        files_created = [
            "performance_config.json",
            "performance_reports/",
            "quick_start.py"
        ]
        
        for file in files_created:
            if Path(file).exists():
                print(f"   ‚úÖ {file}")
            else:
                print(f"   ‚ùå {file}")
        
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("   1. Certifique-se de que o projeto est√° rodando: npm run dev")
        print("   2. Execute um teste r√°pido: python quick_start.py")
        print("   3. Execute a su√≠te completa: python master_performance_suite.py")
        print("   4. Veja o dashboard: open performance_dashboard.html")
        
        if not self.chrome_available:
            print("\n‚ö†Ô∏è ATEN√á√ÉO:")
            print("   Chrome/Chromium n√£o foi encontrado.")
            print("   Instale um browser compat√≠vel para usar Selenium.")
        
        if not self.node_available:
            print("\n‚ö†Ô∏è ATEN√á√ÉO:")
            print("   Node.js n√£o foi encontrado.")
            print("   Instale Node.js para executar o projeto principal.")
    
    def run_installation(self):
        """Executa instala√ß√£o completa"""
        self.print_header()
        
        # Verificar pr√©-requisitos
        if not self.check_prerequisites():
            print("\n‚ùå Pr√©-requisitos n√£o atendidos. Instala√ß√£o abortada.")
            return False
        
        # Instalar depend√™ncias Python
        if not self.install_python_dependencies():
            print("\n‚ùå Falha na instala√ß√£o das depend√™ncias Python.")
            return False
        
        # Configurar ChromeDriver
        self.install_chrome_driver()
        
        # Instalar Lighthouse (opcional)
        self.install_lighthouse()
        
        # Criar arquivos de configura√ß√£o
        self.create_config_file()
        self.create_output_directory()
        self.create_quick_start_script()
        
        # Testar instala√ß√£o
        self.run_installation_test()
        
        # Resumo final
        self.print_installation_summary()
        
        print("\nüéâ INSTALA√á√ÉO CONCLU√çDA!")
        return True

def main():
    """Fun√ß√£o principal"""
    installer = PerformanceSuiteInstaller()
    
    try:
        success = installer.run_installation()
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Instala√ß√£o interrompida pelo usu√°rio")
        return 130
    except Exception as e:
        print(f"\nüí• Erro inesperado durante instala√ß√£o: {e}")
        return 1

if __name__ == "__main__":
    exit(main()) 